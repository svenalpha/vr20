vr20 cloned from vr19
useContext for loggedIn, setLoggedIn   
menu css  improved 


from youtube:https://www.youtube.com/watch?v=H5JXz1RzRTY   11:16 "Unlock Lightning-fast SEO-friendly 
Apps with Vite SSR and React"
from github:gihanrangana/vite-express-ssr-ts  //  Unlock Lightning-fast SEO-friendly Apps with Vite SSR and React
saved in c:\web\00_archives/vite-express-ssr-ts-main

the github example is more built out than the youtube example. It has 3 pages (react-router), helmet). 

stack: "Y@https://vr13.onrender.com/assets/index-6mBp7LUM.js:75:13400\nXw@https://vr13.onrender.com/assets/index-6mBp7LUM.js:77:1042\nE@https://vr13.onrender.com/assets/index-6mBp7LUM.js:77:4233\n"


vr19 cloned from vr18, but adding jwt from TNN_Node Auth Tutorial, to accomodate 
multiple mongodb connections, necessary because jwt inclusion means a user list 
is used which is stored on mongo, mongoconnect was changed to 
.createConnection for multiple connections. This entailed other changes, moving the establishment of a 
connection to a new dbm.ts file (ie db management file). WorkoutDbModel.js becomes 
a .ts file, with other changes. 
vr19 Landing, Signup, Login  pages do not show header menu, using : <style type="text/css">{`._navWrapper_nssbc_1{display: none}`}</style>  
validator installed to check a valid email has been entered do:npm i --save-dev @types/validator
mongodb: created new collection node-auth(database),members(collection), but application defaults to 
test,members. Changed member to punter,members to punters,Member to Punter, created new collection 
node-auth,punters. Again application defaulted to test/punters, creating the very collection punters 
in test/punters. 
typescript array problem solved with: var array1 :any[]= problem_array; then use array1.  
mongoose hooks, eg save/remove pre/post
hashing passwords TNN_auth#7 using bcrypt, cookies TNN_Auth #9 for authentication beware  "cross site 
request forgery"
jsonwebtoken.. will need to be "secure when not testing" , testing for web token and its 
authenticity was problematic. It was divided. Existence of jwt is tested client side in Layout.tsx.
Authenticity is then tested server side in  jwtVerify app.ts to authController 
started scss, continued in clone vr20




"document is not defined" error: quick fix: put inside a useEffect eg:
useEffect(()=>{const emailError:any = document.querySelector('.email.error');}); (because the 
useEffect callback runs after the component is mounted and painted)


vr13 is built out vite-express-ssr-ts-main using react, succesful fetch from backend, fetching entries 
from mongo but not C-UD of crud. Successfully uploaded to render.
vr13 is to be left as is.
vr18 to be vr13 built out to include crud, including ts (react) useContext to update local totals 
to be in synch with remote mongo db. In vr18 the crud elements are taken from TNN_MERN Stack tutorial 
(video files in c:\web\00Videos_web). The crud techniques (including useContext) do not use 
typescript. Adapting them took time and contain non-intuitive solutions. vr18 is thus 
ssr-react/vite/crud/typecript model.

also 1) imported icons ( using material icons from  google), used for delete; 2)date 
formatting using "date fns", 
and 3) imported font. 

1) imported icon - first find specific icon, copy <link rel=stylesheet" href="htt.......from 
https://fonts.google.com/icons?selected=Material+Symbols+Outlined:delete:FILL@0;wght@400;GRAD@0;opsz@24&icon.query=delete&icon.size=24&icon.color=%235f6368 
to index.html, just above </head>
in WorkoutDetails.tsx change button to: 
<button className="material-symbols-outlined" onClick={handleClickDelete}>Delete Sweep </button>

2)formatting date - do: npm install date-fns  import to relevant file (WorkoutDetails) with:
import { formatDistanceToNow } from "date-fns/formatDistanceToNow"; change date to:
<p>{formatDistanceToNow(new Date(workout["createdAt"]),{addSuffix: true})}</p>
note: dispatch mention in Extra.tsx line: useEffect(() =>{fetchWorkouts();},[dispatch])   
in webpack an error is generated by date-dns (but it still works). No such problem is encountered by 
vite, but I made the adjustment, anyway. as per: TNN_MERN Stack tutorial #14 



had this message in render log when deploying: 
" Poetry (1.7.1) is installed now. Great!
To get started you need Poetry's bin directory (/opt/render/project/poetry/bin) in your `PATH`
environment variable.
Add `export PATH="/opt/render/project/poetry/bin:$PATH"` to your shell configuration file.
Alternatively, you can call Poetry explicitly with `/opt/render/project/poetry/bin/poetry`.
You can test that everything is set up by executing:
`poetry --version` "

settings in render
// the following, static website did not work 
Branch:     main
Root Directory:   blank(ie nothing entered)
Build Command:   npm install
Publish Directory:   ./dist/app/client



vr13 successful deployment with successful api facility
in render as "web service"     
  branch =  main   
  root directory = blank     
  Build Command =   npm install; npm run build       
  Start Command  =  npm run serve       





to do:
separate file for data to be imported. (ie /folks).
see youtube see 6:00 of  poXp9uP8TfM  19:50   "How to deploy frontend and backend on 
Render in the same folder?"                  


using array in xxx.map  do <div key={dat["id"]}>  <h6>{dat['title']}  {dat['reps']} {dat['load']}</h6> </div>  
workoutControllers changed to .ts from .js and changed (req,res) to (req:any,res:any)




         <div>
            {
            users.map(user => (
                                    <div key={user.id}> 
                                       <h4>{user.username}</h4>
                                       <h4>{user.city}</h4>
                                     </div>  
                              )         
                      )                 

              }
         </div> 


//      {workouts && workouts.map((workout) =>(<p key = {workout["_id"]}> {workout["title"]} </p>  
//                                            )
//                               )   
//      }


              {



  var  res2 : any;
  async function  doCheck(token:any)
    {try{await axios.post('/rrr/doJwtVerify',{token})  
          {res2 = "verified"; 
          }                 
        }catch(err:any){console.log("token exists but is invalid.err.message = ",err.message); 
                        res2 = "unverified";  
                       }  
     if (res2 != "verified") navigate('/login',{replace: true});
    }  //   end async function  doCheck(token:any)  

    useLayoutEffect(() =>
      {const token:any = Cookies.get("jwt");   //Cookies.
       if (token) {doCheck(token);
                  } else 
                  {navigate('/login',{replace: true});
                  }    
      },[]         );  //   end  useLayoutEffect(() =>     
   



  

/////////////////
 
<div  id="first_id"  className={"toHide"} >    
<div id="second_id"  className={styles.nowrap1} >
 <p id="welcome_id"  className={styles.logout_class + "bkg2"}  >welcome, {loggedInName} {}</p>        
         
         
                 
 ////////////////////////        


                 
                {/* see hbs_test5 for extensive css*/}

            {/*EE    </div>        <div id="div_id2>    */}
              
            
              
          {/*RR      <div   className={styles.div2} >    RR*/}   
                 {/*MM
                  <div  id="first_id"  style={loggedIn ? { display: "block"} : {display: "none"} }  > 
                         
                      <ul id ="first_ul" >
                     
                         <li>
                           <p id="welcome_id"  className={styles.logout_class + "bkg2"}  >welcome, {loggedInName} {}</p>   
                        </li>     
                        <li>
                          <p id="logout_id" className={styles.logout_class} onClick={()=>(handleClickLogout2())}>Logout</p>   
                        </li> 
                     
                     </ul> 
                     
                  </div>
             MM*/} 
               {/*YY
                   <div id="second_id"  style={!loggedIn ? { display: "inline"} : {display: "none"} }  >
                     <ul  className={styles.nowrap1}>
                       <li>
                         <NavLink to={"login"} id="login_id">  Login</NavLink>
                       </li> 
                       <li>
                         <NavLink to={"signup"} id="signup_id" >Signup</NavLink>
                       </li>  
                     </ul> 
                   </div> 
                YY*/}

   {/*RR}    </div>     RR*/}      {/* end    <div   className={styles.div2} >     */}  
   
//  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

<div  className={styles.div2} >   
                <div  className={styles.div21} >                         
                <ul  className={styles.nav} >

                     <li>
                         <p id="welcome_id"  className={styles.logout_class + "bkg2"}  >welcome, {loggedInName} {}</p> 
                     </li>    
                     <li>
                        <p id="logout_id" className={styles.logout_class} onClick={()=>(handleClickLogout2())}>Logout</p>   
                     </li>  

                     <li>
                        <NavLink to={"login"}>Login</NavLink>
                     </li> 
                     <li>
                        <NavLink to={"signup"} style={{color: 'red' }} >Signup</NavLink>
                     </li>                                          
                </ul> 
            </div>    
            </div>    
 
//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx














///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////// index.css from here  /////////////////////////////////////////////////////////////////////////////////////////////   
/* google font */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;800&family=VT323&display=swap');

/* layout */
:root {
  --primary: #1aac83;
   --error: #e7195a;
}
body {
  background: #f1f1f1;
  margin: 0;
  font-family: "Poppins";
}
header {
  background: #fff;
}
header .container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 10px 20px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
header a {
  color: #333;
  text-decoration: none;
}
.pages{
  max-width: 1400px;
  padding: 20px;
  margin: 0 auto;
}

/* homepage */
.home {
  display: grid;
  grid-template-columns: 3fr 1fr;
  gap: 100px;
}
.workout-details {
  background: #fff;
  border-radius: 4px;
  margin: 20px auto;
  padding: 20px;
  position: relative;
  box-shadow: 2px 2px 5px rgba(0,0,0,0.05);
}
.workout-details h4 {
  margin: 0 0 10px 0;
  font-size: 1.2em;
  color: var(--primary);
}
.workout-details p {
  margin: 0;
  font-size: 0.9em;
  color: #555;
}
.workout-details span {
  position: absolute;
  top: 20px;
  right: 20px;
  cursor: pointer;
  background: #f1f1f1;
  padding: 6px;
  border-radius: 50%;
  color: #333;
}

/* new workout form */
label, input {
  display: block;
}
input {
  padding: 10px;
  margin-top: 10px;
  margin-bottom: 20px;
  width: 100%;
  border: 1px solid #ddd;
  border-radius: 4px;
  box-sizing: border-box;
}
form button {
  background: var(--primary);
  border: 0;
  color: #fff;
  padding: 10px;
  font-family: "Poppins";
  border-radius: 4px;
  cursor: pointer;
}
div.error {
  padding: 10px;
  background: #ffefef;
  border: 1px solid var(--error);
  color: var(--error);
  border-radius: 4px;
  margin: 20px 0;
}
input.error {
  border: 1px solid var(--error);
}


////////////////////// end index.css from here  //////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





